@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime

<section class="video_container">
    @if (controls)
    {
        <video id="@_uniqueVideoPlayerId" src="@(src ?? _videoPlaceHolder)" playsinline controls muted=@muted autoplay=@autoplay preload="none">
            <img src="@(fallbackImage ?? _imagePlaceHolder)" title="Your browser does not support the <video> tag" />
        </video>
    }
    else
    {
        <video id="@_uniqueVideoPlayerId" src="@(src ?? _videoPlaceHolder)" class="no-controls-video" playsinline loop=@loop muted=@muted autoplay=@autoplay>
            <img src="@(fallbackImage ?? _imagePlaceHolder)" title="Your browser does not support the <video> tag" />
        </video>

        if (showCustomPlayButton)
        {
            <div class="play_button_container" @onclick=@(() => PlayVideo())>
                <span class="fa-solid fa-circle-play"></span>
            </div>
        }

        if (showCustomMuteButton)
        {
            <div class="mute_button_container" @onclick=@(() => ToggleMute())>
                <span class="fa-solid @(muted ? "fa-volume-slash" : "fa-volume")"></span>
            </div>
        }
    }

    @ChildContent
</section>

@code {
    [Parameter]
    [EditorRequired]
    public string? src { get; set; }

    [Parameter]
    public bool autoplay { get; set; } = false;

    [Parameter]
    public bool loop { get; set; } = false;

    [Parameter]
    public bool muted { get; set; } = false;

    [Parameter]
    public bool controls { get; set; } = false;

    [Parameter]
    public string? fallbackImage { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool showCustomPlayButton { get; set; } = false;

    [Parameter]
    public bool showCustomMuteButton { get; set; } = true;

    private readonly string _uniqueVideoPlayerId = Guid.NewGuid().ToString();
    private readonly string _videoPlaceHolder = "./_content/NativoPlus.BlazorRCL/placeholder.mp4";
    private readonly string _imagePlaceHolder = "./_content/NativoPlus.BlazorRCL/placeholder.png";

    private IJSObjectReference? _module;

    protected override void OnInitialized()
    {
        muted = (muted || autoplay);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/NativoPlus.BlazorRCL/Nativo-Video.razor.js");

            if (muted)
                await _jsRuntime.InvokeVoidAsync("helperFunctions.muteVideo", _uniqueVideoPlayerId);

            if (autoplay)
                await _jsRuntime.InvokeVoidAsync("helperFunctions.playVideo", _uniqueVideoPlayerId);
        }
    }

    public void PlayVideo()
    {
        muted = false;
        autoplay = true;
        controls = true;
        this.StateHasChanged();
    }

    public async Task ToggleMute()
    {
        if (muted)
            await _jsRuntime.InvokeVoidAsync("helperFunctions.unmuteVideo", _uniqueVideoPlayerId);
        else
            await _jsRuntime.InvokeVoidAsync("helperFunctions.muteVideo", _uniqueVideoPlayerId);

        muted = !muted;
        this.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }
}

<link href="./_content/NativoPlus.BlazorRCL/css/fontawesome.css" rel="stylesheet" />